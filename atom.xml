<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailZBlog</title>
  
  <subtitle>Step by Step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.snailz.top/"/>
  <updated>2018-09-01T08:02:27.906Z</updated>
  <id>http://www.snailz.top/</id>
  
  <author>
    <name>SnailZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蜗牛基础积累（三）----C/C++内存管理机制</title>
    <link href="http://www.snailz.top/2018/09/01/fundamental3/"/>
    <id>http://www.snailz.top/2018/09/01/fundamental3/</id>
    <published>2018-09-01T06:41:28.000Z</published>
    <updated>2018-09-01T08:02:27.906Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="基础积累" scheme="http://www.snailz.top/categories/%E5%9F%BA%E7%A1%80%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛墙裂安利（四）</title>
    <link href="http://www.snailz.top/2018/09/01/share4/"/>
    <id>http://www.snailz.top/2018/09/01/share4/</id>
    <published>2018-09-01T04:50:29.000Z</published>
    <updated>2018-09-01T06:35:40.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这篇安利应该说是给生活加点仪式感的东西，我这人就是比较奇怪，总喜欢看一些积少成多的结果。每年支付宝的一年账单统计，网易云的音乐统计我能看上好几遍。看的心里贼爽。每次看到都想想这一年居然花了这么多钱，这一年居然听了这么多歌。这周三的时候我用了将近一晚上的时间找到了这四个用起来很有仪式感，UI很简介，统计很清晰的手机APP。准备用这四个APP来记录一下自己的生活，给自己的生活加点仪式感，假装是个文青。<br><a id="more"></a></p><h1 id="Forest"><a href="#Forest" class="headerlink" title="Forest"></a>Forest</h1><p>第一个肯定是必备的专注森林。这个是用来防止我玩手机的。啊，而且算是我第一次在APP Store上花钱买的软件。虽然是个准程序员，但是以前不太地道的我总是去找破解的软件，现在想想真不是人。还是得尊重一下别人的劳动成果。买买买，才12嘛小钱。</p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-4.PNG" width="40%"></center><p>Forest虽然UI有点丑，但是简单，没有什么花里胡哨的东西。反正就是一个倒计时的软件。一次三小时，不碰手机不玩游戏，还是很能达到督促自己的效果。那天手机放在书下面，不知道按到什么了，当我开开心心地要去吃午饭的时候，发现Forest不知道啥时退出了，死了四棵树心疼死我了。还好用金币搞了一下。<br>除了线上的数据让人看起来很爽，Forest还有线下种树的活动，跟蚂蚁森林一毛一样，蚂蚁森林我已经种一棵数了。我的目标是在Forest上也种几棵树。看起来简单实际上很难啊，一棵树都要几千金币。只能静下心来坚持不玩手机搞一波了。</p><h1 id="DayGram"><a href="#DayGram" class="headerlink" title="DayGram"></a>DayGram</h1><p>这是一款写小日记的，记仇的，记录小灵感的APP。这是我无意中发现的，但是喜欢的不行，这个UI简直太漂亮了，就像JONG WANG说的不乱设计就是最好的设计。整个页面简简单单没有一丝多余的东西，也没有让人觉得很空泛。简直就像杜蕾斯的广告，没有一句话不开车，也没有让人觉得很恶俗。而且记录的字体看起来很美，不管什么记仇的话在这种字体下面感觉都很文雅。</p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-5.PNG" width="40%"></center><p>但是对我个人来说，我想再加上两个功能。一个是标签的功能，用户可以根据自己的需求在文字中加一个标签，这个标签可以用来索引，特别是灵光一现的灵感，可以通过标签索引出来，还有自己的目标也能够索引出来。要不在一段时间之后如果想要回头看一下之前自己说过的什么高级的话很难查得到。第二个是统计功能，哈哈哈这个功能不是很实用，但是我个人很喜欢，要是能够添加第一个标签的功能的话那么可以通过标签来进行统计。每年都能看一下自己闪过多少灵感，记过多少仇，还有多少目标没有完成。还是很有趣的。</p><h1 id="BlockyTime"><a href="#BlockyTime" class="headerlink" title="BlockyTime"></a>BlockyTime</h1><p>这是一款记录时间的APP，不贵不贵才12，买买买。现在App Store里的大部分记录时间的软件都走向了一个误区，都是做事前开启，做事后关闭，真正想要认真做事的人哪会去在意这个东西。真正记录时间的APP应该像BlockyTime这样，不是为了精确而记录，不是为了记录而记录，也不是为了空话而记录。在事情完成之后，为自己画上一格颜色，打个卡，简简单单又不是乐趣。而且BlockyTime的统计画的很漂亮，各种颜色看起来都很美。</p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-6.PNG" width="40%"></center><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-2.PNG" width="40%"></center><p>回顾一周发现自己手机玩的有点多，有点糟糕。我相信到年末的时候画出来的统计图会很美。</p><h1 id="圈子账本"><a href="#圈子账本" class="headerlink" title="圈子账本"></a>圈子账本</h1><p>最后这款是用来记账的，好不容易才找到这个好看的。其他记账的都喜欢和金融理财连在一起，整个画面充满理财广告看着就烦。这款账本就很纯粹，记了几天发现自己真的在吃喝上花太多钱了。妈耶，吐槽一下食堂的饭真的是又贵又难吃。</p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-7.PNG" width="40%"></center><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这都是一些简单但是很实用的小工具，给自己的生活加点仪式感，让自己能够沉淀，能够静下心来。希望在这浮躁的时代，这几款小工具能够帮我度过考研，充实自己，打好基础。好了好了，我要用DayGram记仇去了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;这篇安利应该说是给生活加点仪式感的东西，我这人就是比较奇怪，总喜欢看一些积少成多的结果。每年支付宝的一年账单统计，网易云的音乐统计我能看上好几遍。看的心里贼爽。每次看到都想想这一年居然花了这么多钱，这一年居然听了这么多歌。这周三的时候我用了将近一晚上的时间找到了这四个用起来很有仪式感，UI很简介，统计很清晰的手机APP。准备用这四个APP来记录一下自己的生活，给自己的生活加点仪式感，假装是个文青。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="墙裂安利" scheme="http://www.snailz.top/categories/%E5%A2%99%E8%A3%82%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第七周</title>
    <link href="http://www.snailz.top/2018/09/01/Fight-7Week/"/>
    <id>http://www.snailz.top/2018/09/01/Fight-7Week/</id>
    <published>2018-09-01T04:23:04.000Z</published>
    <updated>2018-09-01T08:01:50.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>感觉这周的状态比较好，到今天开始已经是九月了，时间越来越少了。图书馆晚上也开门了，这周找了几个小工具软件可以用来督促自己，感觉执行的还不错。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>这周原打算是把红宝书看到级数部分，但是突然发现自己对第二类曲线积分和第二类曲面积分的理解有偏差，所以今天把课本又拿出来看了一遍，对知识点回顾了一下，感觉可以理解，纠正了理解的错误。但是题还是不会做，看到一个题没办法反应过来该用什么方法。很糟心。得多刷点相关的练习。后面还有无穷级数和微分方程等着呢。现在终于有量化我学习情况的东西了，虽然都是形式化的，但是感觉我还真的有受到督促。下面是这周的时间使用的统计图从周三开始，下周开始就能有完整的一周的统计了，看着很舒服。</p><p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-1.PNG" width="40%"></center></p><p><center><img src="http://pcnzo4nai.bkt.clouddn.com/week7-2.PNG" width="40%"></center><br>看这个图感觉好像手机还是玩的太多了。</p><h1 id="有趣的事"><a href="#有趣的事" class="headerlink" title="有趣的事"></a>有趣的事</h1><p>这周遇到了一个好玩的事，IOS12的公测版出现了小bug，听说是程序员的错误把某个参数写死了，总是提示有新版本请更新哈哈哈。这是我第一次遇到这种系统问题的事，想想还有点小激动。<br>还有一个有趣的事，虎扑上有个活动是我最喜欢的2k的2kRonnie在线回答网友的提问，我随便皮了一句用英文问2k MC模式里的女主能不能是2kTV的Rachel居然有上百个亮了。有点小激动。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下周就有完整的统计了，感觉很舒服，效率真的提高很多。太烦了之前写的那个总结知识点的博客公式怎么调都不行，我准备把它删了。下周继续加油，蜗壳真的强！<br><img src="http://pcnzo4nai.bkt.clouddn.com/week7-3.jpg" alt="road"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;感觉这周的状态比较好，到今天开始已经是九月了，时间越来越少了。图书馆晚上也开门了，这周找了几个小工具软件可以用来督促自己，感觉执行的还不错。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第六周</title>
    <link href="http://www.snailz.top/2018/08/26/Fight-6Week/"/>
    <id>http://www.snailz.top/2018/08/26/Fight-6Week/</id>
    <published>2018-08-26T02:05:13.000Z</published>
    <updated>2018-08-26T02:54:14.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>又是一周反省的时间，时间真的过的好快，但是感觉复习的进度渐渐赶不上计划了，有点慌张。终于意识到自己是一个多么懒散的人，一身的臭毛病坏习惯。学习效率时好时坏。总想翻手机，又感觉没什么好看的。心里慌得不行行动上却总是不见改变。真的很垃圾。借这回考研一定要解决这个问题。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>我的学习生涯一直有个很大的缺点就是不会总结，所以知识点在我的脑海里都没法形成框架形成体系。看了张宇的一个开讲视频，他说在九月份要对数学整体有一个知识脉络出来。这作为九月份的一个目标吧。现在学习到二元微分。张宇视频中提到要保持计算练习，增强计算的能力，所以最近即使一些例题不会做，我也会看完思路后自己动手解一遍。总的来说进度还是偏慢，需要继续鞭策自己。英语阅读最近发现存在一个问题就是四个选项在文章中感觉都有道理，或者都没道理，让人很纠结。还有阅读速度需要提升。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下周把手机藏起来，静下心来，在脑海里建立知识框架。要有清晰的感觉。到现在为止总觉得自己的复习像是没有复习一样，时间不等人了，要紧张起来。<br><img src="http://pcnzo4nai.bkt.clouddn.com/timg.jpg" alt="静"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;又是一周反省的时间，时间真的过的好快，但是感觉复习的进度渐渐赶不上计划了，有点慌张。终于意识到自己是一个多么懒散的人，一身的臭毛病坏习惯。学习效率时好时坏。总想翻手机，又感觉没什么好看的。心里慌得不行行动上却总是不见改变。真的很垃圾。借这回考研一定要解决这个问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第五周</title>
    <link href="http://www.snailz.top/2018/08/18/Fight-5Week/"/>
    <id>http://www.snailz.top/2018/08/18/Fight-5Week/</id>
    <published>2018-08-18T03:58:11.000Z</published>
    <updated>2018-08-18T04:08:55.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这周真的是过的没有感觉，不知不觉第五周了，前几周看课本的时候还觉得有点收获，这周真的过的匆匆忙忙。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>现在复习让我感觉特别紧张，每天看起来一直在学习，但是好像进度缓慢，一整周的时间才把一元函数微分学看完，而且看完还是比较懵逼的，做题的错误率比较高，有点迷茫呀。得调整一下自己的复习方法了，多总结，举一反三。要把做题的效率提高。英语这周练习做的还不错，要是能沉下心来做，争取率较高。下周开始一元函数积分学了，要抓紧速度了。</p><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>这周同学请客吃饭，运动有点落下了，要坚持住。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>真的感觉时间很不够用了，希望接下来要提高自己的效率把时间都利用起来不能吊儿郎当的了。<br><img src="http://pcnzo4nai.bkt.clouddn.com/ocean2.jpg" alt="ocean"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;这周真的是过的没有感觉，不知不觉第五周了，前几周看课本的时候还觉得有点收获，这周真的过的匆匆忙忙。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛墙裂安利（三）</title>
    <link href="http://www.snailz.top/2018/08/11/share3/"/>
    <id>http://www.snailz.top/2018/08/11/share3/</id>
    <published>2018-08-11T08:44:56.000Z</published>
    <updated>2018-08-11T10:13:23.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这周写实习的总结报告，心情烦躁哈哈哈，真的很不喜欢写报告写多了也不行，写少了也不行，就不像写博客这么轻松，而且写博客不用那么严谨正式，我是个懒散的人就不喜欢这些太正式的东西。<br><a id="more"></a></p><h1 id="阿汤哥"><a href="#阿汤哥" class="headerlink" title="阿汤哥"></a>阿汤哥</h1><p>最近在看汤姆克鲁斯的碟中谍，碟中谍这个系列电影真的太酷了，阿汤哥真的是男生心目中想要成为的人，是女生心中想要的人哈哈哈。他在剧中扮演的Eathon是个基本把生活技能点满的bug人物，他所在的部门IMF专治各种不服，专门挑不可能完成的任务去做。这部片吸引我的不仅仅是紧张刺激的情节还有阿汤哥个人的那种拼劲。<br>我之所以把这个系列翻出来看是因为最近碟中谍6快要上映了，前期放出的一个纪录片视频讲的是其中一个阿汤哥从飞机上跳下来的镜头，这个镜头阿汤哥需要完成的是传说中的HALO极限跳伞（我也不懂）这是一种典型的可以用来解释为啥外国人少的极限运动。但也是军事上用来躲避雷达的好方法，就是从高空离机跳伞，在超低空拉出降落伞。危险系数贼高。但是阿汤哥为了电影效果亲自上阵跳伞。在完成了很多很多次的危险跳伞后完成了令人震惊的那几十秒的画面。真真佩服。反正我一定要去看。</p><h1 id="李荣浩"><a href="#李荣浩" class="headerlink" title="李荣浩"></a>李荣浩</h1><p>看网易云下面李荣浩的歌的评论中总有一句话，跟李荣浩合作好难哈哈哈，李荣浩的歌里面一堆制作人的名字都是他。这回我喜欢上了年少有为和成长之重量，歌也好词也好谁听谁知道。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>蜗壳真的强！<br><img src="http://pcnzo4nai.bkt.clouddn.com/night.jpg" alt="night"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;这周写实习的总结报告，心情烦躁哈哈哈，真的很不喜欢写报告写多了也不行，写少了也不行，就不像写博客这么轻松，而且写博客不用那么严谨正式，我是个懒散的人就不喜欢这些太正式的东西。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="墙裂安利" scheme="http://www.snailz.top/categories/%E5%A2%99%E8%A3%82%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第四周</title>
    <link href="http://www.snailz.top/2018/08/11/Fight-4Week/"/>
    <id>http://www.snailz.top/2018/08/11/Fight-4Week/</id>
    <published>2018-08-11T04:41:40.000Z</published>
    <updated>2018-08-11T10:13:05.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>第三周拉，这周感觉很微妙，有几个晚上真的累的啥事也不想做，就想躺在床上放空。这周总体来说早晨的效率比较高而且现在是八月份拉，紧张的气息越来越重。养成了一个早晨写计划的好习惯，前几天都能在白天就完成。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>上周把线性代数的课本过完了，现在开始刷红宝书了，我计划是两天一章，把红宝书的例题和600习题相关的练习做了。现在还在照着计划进行，但是刚开始做红宝书的时候感觉力不从心，终于知道之前为啥一考试就考不好，就是因为题做的太少了，知道概念不知道题型。红宝书真的把题型总结的很棒，但是题目确实做起来还是有点吃力。得好好总结，好好练习。英语做题容易静不下心来，一个unit前两篇做的很不错，后两篇错很多。不过这么久的锻炼后即使一篇中生词很多还是能看懂文章内容，但是看不懂题目。</p><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>运动还是照常进行不过周一周二周三拉肚子，而且感觉膝盖有点酸痛，所以运动量不是很大。周四晚上没有睡好，周五下午就晕乎乎的。身体真的是本钱啊。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这周一直想总结一下bst，但是怕自己写的不好。希望下周能把计划做的事情都完成。希望数学刷题能提高一下。还有把实习总结报告写完。蜗壳真的强！<br><img src="http://pcnzo4nai.bkt.clouddn.com/ocean.jpg" alt="ocean"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;第三周拉，这周感觉很微妙，有几个晚上真的累的啥事也不想做，就想躺在床上放空。这周总体来说早晨的效率比较高而且现在是八月份拉，紧张的气息越来越重。养成了一个早晨写计划的好习惯，前几天都能在白天就完成。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛基础积累（二）----二叉搜索树（BST）的序列化和反序列化</title>
    <link href="http://www.snailz.top/2018/08/04/fundamental2/"/>
    <id>http://www.snailz.top/2018/08/04/fundamental2/</id>
    <published>2018-08-04T02:02:02.000Z</published>
    <updated>2018-08-04T02:49:54.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这是最近遇到的一个基础数据结构的题，这篇文章就想总结一下二叉搜索树的性质，二叉搜索树的遍历方法，二叉搜索树的重建方法。总结一下思路和代码实现。<br><a id="more"></a></p><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><p>&lt;未完待续&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;这是最近遇到的一个基础数据结构的题，这篇文章就想总结一下二叉搜索树的性质，二叉搜索树的遍历方法，二叉搜索树的重建方法。总结一下思路和代码实现。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础积累" scheme="http://www.snailz.top/categories/%E5%9F%BA%E7%A1%80%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第三周</title>
    <link href="http://www.snailz.top/2018/08/04/Fight-3Week/"/>
    <id>http://www.snailz.top/2018/08/04/Fight-3Week/</id>
    <published>2018-08-04T01:40:52.000Z</published>
    <updated>2018-08-04T02:42:33.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>第三周了，感觉时间过的还是很快的。天气也越来越热了，但是要忍受早上图书馆冷的要死的空调，晚上要忍受教研室没有空调的闷热空气。成都的天贼TM神奇，原本还是晴空万里，一眨眼就开始电闪雷鸣。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>这周概率论收了尾，开始我最怕的线性代数的复习。但是线性代数前面部分感觉好像还是比较简单的，没有以前学起来那么吃力。把前面部分过了一遍。这周有个惊奇的发现，好像英语阅读有一丝丝的提高了。说明复习有点效果了，找回了一些做阅读的感觉了。下周把线性代数收尾了，线性代数的后面几章应该是全书最难的，当年虐的我体无完肤。把课本都过了一遍就要开始刷红宝书了。</p><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>这周运动还在坚持，跑了一次天府广场，另一次跑周边的地方，总的加起来从才开始复习到现在跑了几十公里了吧，感觉每次跑完步都很舒服，身心愉悦。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这周偷懒的时候还刷了点LeetCode的题，感觉很有趣。在身边人面试的时候，感觉面试真的好难啊，我要把我听到的题都做一遍总结一下。这周学习的时候确实有时容易走神，下周继续加油吧，要把注意力不集中的问题解决一下了。哈哈，看知乎里胡适在日记里提醒自己不能再打牌了，要好好学习，然而控制不住自己。蒋介石在日记里提醒自己不能再贪恋女色了，但是控制不住自己。我在这说要解决注意力不集中问题可能也控制不住呀。反正就得对自己严一点吧。确实到现在我还是没有紧张的感觉，让我很慌。<br><img src="http://pcnzo4nai.bkt.clouddn.com/168323.jpg" alt="star"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;第三周了，感觉时间过的还是很快的。天气也越来越热了，但是要忍受早上图书馆冷的要死的空调，晚上要忍受教研室没有空调的闷热空气。成都的天贼TM神奇，原本还是晴空万里，一眨眼就开始电闪雷鸣。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（六）----整数转罗马数字</title>
    <link href="http://www.snailz.top/2018/08/03/arithmetic6/"/>
    <id>http://www.snailz.top/2018/08/03/arithmetic6/</id>
    <published>2018-08-03T09:06:17.000Z</published>
    <updated>2018-08-03T09:27:44.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。</p><div class="table-container"><table><thead><tr><th>字符</th><th style="text-align:center">数值</th></tr></thead><tbody><tr><td>I</td><td style="text-align:center">1</td></tr><tr><td>V</td><td style="text-align:center">5</td></tr><tr><td>X</td><td style="text-align:center">10</td></tr><tr><td>L</td><td style="text-align:center">50</td></tr><tr><td>C</td><td style="text-align:center">100</td></tr><tr><td>D</td><td style="text-align:center">500</td></tr><tr><td>M</td><td style="text-align:center">1000</td></tr></tbody></table></div><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。<a id="more"></a></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题就是上次那题（在算法积累4里）的变形，上次把罗马数字转整数，这回是整数转罗马数字。上次那题是简单等级的，这回是中等的。这回这题第一次一次通过。吓得我赶紧查了一下，发现思路是对的。但是比较复杂一点。也查到了简单的做法。</p><h5 id="复杂的思路"><a href="#复杂的思路" class="headerlink" title="复杂的思路"></a>复杂的思路</h5><p>我的思路主要是先将整数按位分割开来，由于只有4位比较好办。每一位都对1，5，10进行赋值（因为每一位上的1，5，10的表示不一样，其他都是根据这三个数扩展的）。然后再将每一位上的数进行分类表示。比较暴力的做法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">1</span> || num &gt; <span class="number">3999</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;nums;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.push_back(num % <span class="number">10</span>);</span><br><span class="line">            num = num / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> one,five,ten;</span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        one = <span class="string">"I"</span>;</span><br><span class="line">                        five = <span class="string">"V"</span>;</span><br><span class="line">                        ten = <span class="string">"X"</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        one = <span class="string">"X"</span>;</span><br><span class="line">                        five = <span class="string">"L"</span>;</span><br><span class="line">                        ten = <span class="string">"C"</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        one = <span class="string">"C"</span>;</span><br><span class="line">                        five = <span class="string">"D"</span>;</span><br><span class="line">                        ten = <span class="string">"M"</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        one = <span class="string">"M"</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span>(nums.at(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.at(i); j++)</span><br><span class="line">                            result += one;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        result += one;</span><br><span class="line">                        result += five;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        result += five;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        result += five;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; nums.at(i) - <span class="number">5</span>; k++)</span><br><span class="line">                            result += one;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        result += one;</span><br><span class="line">                        result += ten;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="比较巧妙的做法"><a href="#比较巧妙的做法" class="headerlink" title="比较巧妙的做法"></a>比较巧妙的做法</h5><p>把1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1的罗马数字的表示法列出来，因为这些数要么是特例，要么其他数是根据这些数扩展来的。输入的整数不断去减能够减的最大值。能减去一个最大值则结果加上一个最大值对应的罗马数字。巧妙得很。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str&#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= val[i]) &#123;</span><br><span class="line">                num -= val[i];</span><br><span class="line">                res += str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>但是第二种方法的时间复杂度比较高，不过思路很独特在这记录一下，还有一种时间复杂度为O（1）的奇葩的方法，思路不是很高明就不写了。蜗壳真的强。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。&lt;br&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。&lt;/li&gt;
&lt;li&gt;X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。&lt;/li&gt;
&lt;li&gt;C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。&lt;br&gt;给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（五）----两数相加</title>
    <link href="http://www.snailz.top/2018/08/02/arithmetic5/"/>
    <id>http://www.snailz.top/2018/08/02/arithmetic5/</id>
    <published>2018-08-02T12:31:12.000Z</published>
    <updated>2018-08-02T12:59:28.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>示例：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>第一次试了一下中等题，这道题的思路还是比较简单的，分析之后无非就需要三种情况</p><ol><li>两个数的长短不一致的情况</li><li>本位相加后有进位</li><li>进位是空节点<br>所以解题的过程是从头开始遍历链表，两个链表的数及进位相加取余作为本位的值，取商作为进位的值。当节点为空时，值用0代替。直到两个链表都为空。判断是否有进位，若有进位则添加进位节点。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode *result; </span><br><span class="line">        ListNode *head;</span><br><span class="line">        result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        head = result;</span><br><span class="line">        <span class="keyword">int</span> add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num = add;</span><br><span class="line">            <span class="keyword">if</span>(l1  == <span class="literal">NULL</span>)</span><br><span class="line">                num += <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                num += l1 -&gt; val;</span><br><span class="line">            <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>)</span><br><span class="line">                num += <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                num += l2 -&gt; val;</span><br><span class="line">            add = num / <span class="number">10</span>;</span><br><span class="line">            result-&gt;next = <span class="keyword">new</span> ListNode(num % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>) l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>) l2 = l2-&gt;next;</span><br><span class="line">            result = result-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(add != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result -&gt; next  = <span class="keyword">new</span> ListNode(add);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。&lt;/p&gt;
&lt;p&gt;你可以假设除了数字 0 之外，这两个数字都不会以零开头。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原因：&lt;span class=&quot;number&quot;&gt;342&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;465&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;807&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（四）----罗马数字转整数</title>
    <link href="http://www.snailz.top/2018/08/02/arithmetic4/"/>
    <id>http://www.snailz.top/2018/08/02/arithmetic4/</id>
    <published>2018-08-02T12:19:31.000Z</published>
    <updated>2018-08-02T12:38:59.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。</p><div class="table-container"><table><thead><tr><th>字符</th><th style="text-align:center">数值</th></tr></thead><tbody><tr><td>I</td><td style="text-align:center">1</td></tr><tr><td>V</td><td style="text-align:center">5</td></tr><tr><td>X</td><td style="text-align:center">10</td></tr><tr><td>L</td><td style="text-align:center">50</td></tr><tr><td>C</td><td style="text-align:center">100</td></tr><tr><td>D</td><td style="text-align:center">500</td></tr><tr><td>M</td><td style="text-align:center">1000</td></tr></tbody></table></div><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。<a id="more"></a></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这道题的题目看起来很长，但是仔细分析一下发现思路特别简单。由于罗马数字中小的数字在大的数字右边，但是有特例。先忽略特例。我们从右向左遍历字符串。遇到对应的罗马数字的时候就可以将结果加上罗马数字对应的值。这个时候再考虑特例。当特例出现时，检查特例右边的罗马数字是什么。若是比特例大的值则减去特例，否则照常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(s[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i == size - <span class="number">1</span>)</span><br><span class="line">                            num += <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(s[i+<span class="number">1</span>] == <span class="string">'V'</span> || s[i+<span class="number">1</span>] == <span class="string">'X'</span>)</span><br><span class="line">                            num -= <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            num += <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                            num += <span class="number">5</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i == size - <span class="number">1</span>)</span><br><span class="line">                            num += <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(s[i+<span class="number">1</span>] == <span class="string">'L'</span> || s[i+<span class="number">1</span>] == <span class="string">'C'</span>)</span><br><span class="line">                            num -= <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            num += <span class="number">10</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                            num += <span class="number">50</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i == size - <span class="number">1</span>)</span><br><span class="line">                            num += <span class="number">100</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(s[i+<span class="number">1</span>] == <span class="string">'D'</span> || s[i+<span class="number">1</span>] == <span class="string">'M'</span>)</span><br><span class="line">                            num -= <span class="number">100</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            num += <span class="number">100</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                            num += <span class="number">500</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                    &#123;</span><br><span class="line">                            num += <span class="number">1000</span>;</span><br><span class="line">                    &#125;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>罗马数字转整数的比较简单，但是整数转罗马数字的好像难一些，下次尝试一下，蜗壳真的强。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。&lt;br&gt;通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。&lt;/li&gt;
&lt;li&gt;X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。&lt;/li&gt;
&lt;li&gt;C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。&lt;br&gt;给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛墙裂安利（二）</title>
    <link href="http://www.snailz.top/2018/07/30/share2/"/>
    <id>http://www.snailz.top/2018/07/30/share2/</id>
    <published>2018-07-30T11:14:09.000Z</published>
    <updated>2018-08-02T12:47:08.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>今天心情略烦躁，早晨学习效率还算挺高，下午被雨困在教研室，书在图书馆，只能做几篇英语阅读。无法把心静下来，下午把博客稍微做了更新调整。晚上给师兄抢手机，但是手慢了没抢着不过让我有了想写个抢手机的脚本的想法。思路很简单当时间走完直接发送点击的数据包。应该能实现啥时试试看。反正今天的复习计划完全被打乱了，现在追悔莫及只能写篇博客压压惊。<br><a id="more"></a></p><h1 id="东野圭吾的《拉普拉斯的魔女》"><a href="#东野圭吾的《拉普拉斯的魔女》" class="headerlink" title="东野圭吾的《拉普拉斯的魔女》"></a>东野圭吾的《拉普拉斯的魔女》</h1><p>这又是一本东野圭吾的书，主要讲的是几件可以说是比较奇幻的杀人事件，好像也不能说是杀人，仅仅是利用自然的力量让人发生意外。其中有这种神奇能力的则是一个曾经硫化氢中毒，经过复杂手术抢救并且经过大脑改造的少年。改造后的大脑拥有超强的能力，能够根据身边的事务的变化加上物理学的原理预测出将要发生的事情。也就是他利用自己的能力将被害人引导到一个天时地利人和的位置，让大自然创造一个意外完成完美的犯罪。不得不说东野圭吾的脑洞令人佩服。这本书精彩的部分不是案情本身的发展，而是那种仿佛明白又仿佛不明白的感觉。少年的父亲是一位名利双收的大导演，但是他对自己，对自己身边的亲人有近乎变态的完美要求。他总觉得自己的妻子儿子女儿没有达到自己的理想状态，没有达到完美的程度。所以他在少年小的时候用硫化氢事故杀害了自己的妻子和女儿，仅仅留下了失去记忆身受重伤的儿子。他开始在博客上重新创造自己家人的形象，将自己创造成一个完美的父亲的形象一直活在梦里。而他的儿子，也就是经过手术成为了所谓的“拉普拉斯的恶魔”的少年其实没有失忆，只是一直在寻找机会报仇，最终他的计划被另一个拥有相同能力的“拉普拉斯的魔女”破坏了。但是他的父亲原来给自己树立的在公众中高尚的形象崩塌了，受到了应有的惩罚。整本书相当地精彩。</p><h1 id="两个看书的软件"><a href="#两个看书的软件" class="headerlink" title="两个看书的软件"></a>两个看书的软件</h1><p>刚给高考结束的表妹买了一个我特别想要的Kindle，刚刚习惯用电子设备看书不久的我真的不喜欢手机的光，经常是看的我泪流满面。但是么得办法，穷只能将就将就。手机上我最喜欢使用网易蜗牛读书，每天免费领取一小时的时间，一小时内可以看平台上的所有书。一小时结束后可以用一块钱买断一天的时间。寒假的时候我都付出了很多钱了。一看就停不下来了哈哈哈。不过这个平台的书有点少。在平板电脑上我喜欢用Kindle这个软件看，排版好，把光调暗点就不那么刺眼而且书很多，资源很多，同时ipad屏幕大看起来舒服。</p><h1 id="两款佛系的游戏"><a href="#两款佛系的游戏" class="headerlink" title="两款佛系的游戏"></a>两款佛系的游戏</h1><h5 id="《模拟城市：我是市长》"><a href="#《模拟城市：我是市长》" class="headerlink" title="《模拟城市：我是市长》"></a>《模拟城市：我是市长》</h5><p>这是一款移动端上的游戏，我删了下，下了删好几次了，最近又下载下来了，是一个非常佛系的游戏，每天就买东西建房子拆房子，之所以喜欢这个游戏就是因为他不耗时间，每天看看，就可以不管了，而且看着自己城市的资金在增长会感到很开心很有满足感。现在游戏中加入了几个新模式：俱乐部战斗模式，俱乐部任务模式，机场，沙滩，高地。挺有可玩性的佛系游戏</p><h5 id="《欧洲卡车》"><a href="#《欧洲卡车》" class="headerlink" title="《欧洲卡车》"></a>《欧洲卡车》</h5><p>这真的是出了名的佛系游戏，游戏的主剧情就是你是一个开卡车的，到处接受运输任务赚钱，哈哈哈。个人比较喜欢模拟现实类的游戏，这里面可以买卡车，可以买仓库，可以雇佣员工。我喜欢用第一开车，还能把后视镜打开。玩这个游戏我特别遵守交通规则，红灯停，绿灯行，不超速。修身养性，很有意思。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>复习期间很少看其他的书了，感觉有点难受，以后周末要抽出点时间看看课外的书了嘻嘻。蜗壳真的强！<br><img src="http://pcnzo4nai.bkt.clouddn.com/share2.jpg" alt="share2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;今天心情略烦躁，早晨学习效率还算挺高，下午被雨困在教研室，书在图书馆，只能做几篇英语阅读。无法把心静下来，下午把博客稍微做了更新调整。晚上给师兄抢手机，但是手慢了没抢着不过让我有了想写个抢手机的脚本的想法。思路很简单当时间走完直接发送点击的数据包。应该能实现啥时试试看。反正今天的复习计划完全被打乱了，现在追悔莫及只能写篇博客压压惊。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="墙裂安利" scheme="http://www.snailz.top/categories/%E5%A2%99%E8%A3%82%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛基础积累（一）----Shell Script的基本用法</title>
    <link href="http://www.snailz.top/2018/07/30/fundamental1/"/>
    <id>http://www.snailz.top/2018/07/30/fundamental1/</id>
    <published>2018-07-30T04:53:32.000Z</published>
    <updated>2018-08-02T12:46:41.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>又是一篇乘凉的文章，看到<a href="https://liaoshichao.com/%E8%84%9A%E6%9C%AC/2015/07/13/Shell-Script-%E5%9F%BA%E6%9C%AC%E5%86%99%E6%B3%95/" target="_blank" rel="noopener">钓叟的博客</a>学习了一下，重新手打了一遍。钓叟种树我乘凉，以前用shell都很暴力，这回好好总结一波。<br><a id="more"></a></p><h1 id="Shell的分类及Shell-Script"><a href="#Shell的分类及Shell-Script" class="headerlink" title="Shell的分类及Shell Script"></a>Shell的分类及Shell Script</h1><p>Shell的种类有<code>ksh</code>,<code>csh</code>,<code>zch</code>等，Linux默认bash这个shell，Shell Script就是依托Shell程序，靠Shell来解释执行的脚本。</p><h1 id="Shell-Script执行的三种方式"><a href="#Shell-Script执行的三种方式" class="headerlink" title="Shell Script执行的三种方式"></a>Shell Script执行的三种方式</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="number">1</span>、./xxx.<span class="keyword">sh</span>或者path/xxx.<span class="keyword">sh</span></span><br><span class="line">- <span class="number">2</span>、<span class="keyword">sh</span> xxx.<span class="keyword">sh</span>或者bash xxx.<span class="keyword">sh</span></span><br><span class="line">- <span class="number">3</span>、<span class="keyword">source</span> xxx.<span class="keyword">sh</span>或者. xxx.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h5 id="xxx-sh或者path-xxx-sh"><a href="#xxx-sh或者path-xxx-sh" class="headerlink" title="./xxx.sh或者path/xxx.sh"></a>./xxx.sh或者path/xxx.sh</h5><p>指在当前路径下执行脚本（脚本需要有执行权限），需要将脚本文件的权限改为可执行。然后使用相对路径或者绝对路径执行脚本。</p><h5 id="sh-xxx-sh或者bash-xxx-sh"><a href="#sh-xxx-sh或者bash-xxx-sh" class="headerlink" title="sh xxx.sh或者bash xxx.sh"></a>sh xxx.sh或者bash xxx.sh</h5><p>这是当前脚本文件本身没有可执行权限（即文件权限属性x位为-号）时常用的方法，或者脚本文件开头没有指定解释器时需要使用的方法。</p><h5 id="source-xxx-sh或者-xxx-sh"><a href="#source-xxx-sh或者-xxx-sh" class="headerlink" title="source xxx.sh或者. xxx.sh"></a>source xxx.sh或者. xxx.sh</h5><p>source或者“.”命令的功能是读取脚本并执行脚本，即在当前Shell中执行source或者“.”加载并执行相关脚本文件的命令及语句，而不是产生一个子Shell来执行文件中的命令。例如新建一个sh文件如下，不赋予可执行权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'world'</span>;</span><br></pre></td></tr></table></figure></p><p>第三种方式执行过后shell打印hello和world，当我们在shell中继续输入<code>echo $str</code>依旧会输出hello。而第一种方式无法执行，第二种方式可以执行，继续输入结果为空。</p><h1 id="Shell-Script的变量"><a href="#Shell-Script的变量" class="headerlink" title="Shell Script的变量"></a>Shell Script的变量</h1><p>Shell中的普通变量赋值的时候等号两边不能有空格，否则Shell会把变量作为命令处理。在使用定义过变量的时候一般在变量名前加上$符号。如声明一个字符串变量：<code>name=&#39;hello&#39;</code>若需要将变量与其他字符分隔开可以使用花括号如：<code>echo &quot;${name}world&quot;</code>将输出helloworld。</p><h5 id="单引号和双引号包围变量的区别"><a href="#单引号和双引号包围变量的区别" class="headerlink" title="单引号和双引号包围变量的区别"></a>单引号和双引号包围变量的区别</h5><ul><li>单引号包围变量：单引号包围的范围里面是什么，输出就是什么，不管内容是否有命令或者变量，这种方式比较适合定义显示纯字符串的情况。</li><li>双引号包围变量：输出时会先解析里面的变量和命令，这种方式适合字符串中带有变量和命令并且想将其解析后再输出的情况。</li></ul><h5 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h5><ul><li>$$$$ Shell本身的PID</li><li><code>$!</code> Shell最后运行的后台process的PID</li><li><code>$?</code> 当前Shell进程中执行的上一个命令的返回值，可以用来判断上一个命令执行是否出错</li><li><code>$#</code> 表示执行参数的个数</li><li><code>$0</code> 表示当前执行的脚本文件的名称</li><li><code>$n</code> n表示正整数，表示参数。</li></ul><h1 id="Shell-Script的基本语法"><a href="#Shell-Script的基本语法" class="headerlink" title="Shell Script的基本语法"></a>Shell Script的基本语法</h1><h5 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h5><p><code>if [ ] ; then …  fi</code><br><code>if [ ] ; then … elif [ ] ; then … else  fi</code></p><p>Shell Script中的程序块一般是以反写作为结束，判断语句if后面以中括号包围判断条件，<strong> 中括号两端必须要有空格，条件运算符两端也必须要有空格 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"n"</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"you choose no!"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"y"</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"you choose yes!"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"error char!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h5 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h5><p><code>case … in</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"yes"</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"case yes!"</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">"no"</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"case no!"</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">"*"</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"case other!"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><p><code>until [] do … done</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"yes"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print some string"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>while[] do … done</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"yes"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print some string"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>for  var  in …  do … done</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">$1</span> <span class="keyword">in</span> <span class="string">"yes"</span> <span class="string">"ok"</span> <span class="string">"right"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"you choose right!"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>for （（… ; … ; …）） do … done</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(( i=1; i&lt;10; i=i+1))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"the num is <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="函数写法"><a href="#函数写法" class="headerlink" title="函数写法"></a>函数写法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">puts</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"the function is puts!"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"haha"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明必须写在脚本的顶部，函数可以有参数但是不用在括号中声明，使用时直接 <code>函数名</code>+<code>空格</code>+<code>参数</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">putsName</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"the number of args is <span class="variable">$#</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"the name is <span class="variable">$1</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"The script begin!"</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please set your name"</span> NAME</span><br><span class="line">putsName <span class="variable">$NAME</span></span><br></pre></td></tr></table></figure><h5 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h5><p>read命令接收标准输入，或其他文件描述符的输入，共有-a, -d, -e, -n, -p, -r, -t, 和 -s八个选项。</p><ul><li>-a ：将内容读入到数组中</li><li>-d ：表示delimiter，即定界符，一般情况下是以IFS为参数的间隔，但是通过-d，我们可以定义一直读到出现执行的字符位置。例如read –d madfds value，读到有m的字符的时候就不在继续向后读，例如输入为 hello m，有效值为“hello”，请注意m前面的空格等会被删除。这种方式可以输入多个字符串，例如定义“.”作为结符号等等。</li><li>-n ：用于限定最多可以有多少字符可以作为有效读入。如读取五个字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -n 5 word</span><br></pre></td></tr></table></figure><ul><li>-p ：用于给出输入提示</li><li>-r ：在参数输入中，我们可以使用’/’表示没有输入完，换行继续输入，如果我们需要行最后的’/’作为有效的字符，可以通过-r来进行。此外在输入字符中，我们希望/n这类特殊字符生效，也应采用-r选项。</li><li>-t ：用于表示等待输入的时间，单位为秒，等待时间超过，将继续执行后面的脚本，注意不作为null输入，参数将保留原有的值。</li><li>读文件 ：最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的 while命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">count=1    //赋值语句，不加空格</span><br><span class="line">cat <span class="built_in">test</span> | <span class="keyword">while</span> <span class="built_in">read</span> line        //cat 命令的输出作为<span class="built_in">read</span>命令的输入,<span class="built_in">read</span>读到的值放在line中</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Line <span class="variable">$count</span>:<span class="variable">$line</span>"</span></span><br><span class="line">count=$[ <span class="variable">$count</span> + 1 ]          //注意中括号中的空格。 </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"finish"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Shell很强大也很方便，蜗壳真的强！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;又是一篇乘凉的文章，看到&lt;a href=&quot;https://liaoshichao.com/%E8%84%9A%E6%9C%AC/2015/07/13/Shell-Script-%E5%9F%BA%E6%9C%AC%E5%86%99%E6%B3%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;钓叟的博客&lt;/a&gt;学习了一下，重新手打了一遍。钓叟种树我乘凉，以前用shell都很暴力，这回好好总结一波。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础积累" scheme="http://www.snailz.top/categories/%E5%9F%BA%E7%A1%80%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（三）----翻转数组</title>
    <link href="http://www.snailz.top/2018/07/29/arithmetic3/"/>
    <id>http://www.snailz.top/2018/07/29/arithmetic3/</id>
    <published>2018-07-29T04:48:01.000Z</published>
    <updated>2018-08-02T12:46:02.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>给定一个长度为n的整数数组a，元素均不相同，问数组是否存在这样一个片段，只将该片段翻转就可以使整个数组升序排列。其中数组片段[l,r]表示序列a[l], a[l+1], …, a[r]。原始数组为<br>a[1], a[2], …, a[l-2], a[l-1], a[l], a[l+1], …, a[r-1], a[r], a[r+1], a[r+2], …, a[n-1], a[n]，<br>将片段[l,r]反序后的数组是<br>a[1], a[2], …, a[l-2], a[l-1], a[r], a[r-1], …, a[l+1], a[l], a[r+1], a[r+2], …, a[n-1], a[n]。<br>输入<br>第一行数据是一个整数：n (1≤n≤105)，表示数组长度。<br>第二行数据是n个整数a[1], a[2], …, a[n] (1≤a[i]≤109)。<br>输出<br>输出“yes”，如果存在；否则输出“no”，不用输出引号。<br><a id="more"></a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先将数组读入后，进行排序，并保留一个原序的数组，将两个数组进行比较。找到升序数组与原数组不同的那一片段。则这个片段既是我们需要翻转的片段。将这个片段对着比较。若可以翻转则返回yes，否则no。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line"><span class="keyword">int</span> src[N];</span><br><span class="line"><span class="keyword">int</span> aim[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;src[i];</span><br><span class="line">aim[i]=src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(aim,aim+N);</span><br><span class="line"><span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=N<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(aim[begin]==src[begin])begin++;</span><br><span class="line"><span class="keyword">while</span>(aim[end]==src[end])end--;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> g=<span class="number">0</span>;g&lt;=end-begin;g++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(aim[end-g]!=src[begin+g])</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"yes"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"no"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;给定一个长度为n的整数数组a，元素均不相同，问数组是否存在这样一个片段，只将该片段翻转就可以使整个数组升序排列。其中数组片段[l,r]表示序列a[l], a[l+1], …, a[r]。原始数组为&lt;br&gt;a[1], a[2], …, a[l-2], a[l-1], a[l], a[l+1], …, a[r-1], a[r], a[r+1], a[r+2], …, a[n-1], a[n]，&lt;br&gt;将片段[l,r]反序后的数组是&lt;br&gt;a[1], a[2], …, a[l-2], a[l-1], a[r], a[r-1], …, a[l+1], a[l], a[r+1], a[r+2], …, a[n-1], a[n]。&lt;br&gt;输入&lt;br&gt;第一行数据是一个整数：n (1≤n≤105)，表示数组长度。&lt;br&gt;第二行数据是n个整数a[1], a[2], …, a[n] (1≤a[i]≤109)。&lt;br&gt;输出&lt;br&gt;输出“yes”，如果存在；否则输出“no”，不用输出引号。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>人脸考勤设计思路</title>
    <link href="http://www.snailz.top/2018/07/29/people-explore/"/>
    <id>http://www.snailz.top/2018/07/29/people-explore/</id>
    <published>2018-07-29T02:05:22.000Z</published>
    <updated>2018-08-04T02:30:01.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>把上次花了几天时间写的<a href="https://github.com/zmwupgreat/Qt_ArcFace_detection" target="_blank" rel="noopener">人脸考勤系统</a>的设计思路总结一下，顺便总结一下不足之处。第一次独立完成一个小程序的设计还是蛮有成就感的。<br><a id="more"></a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>用到了虹软的人脸识别引擎，Qt Creator，SQLite</p><h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><p>人脸考勤系统主要包括七大模块：</p><h5 id="主界面模块"><a href="#主界面模块" class="headerlink" title="主界面模块"></a>主界面模块</h5><p>主界面模块作为数据逻辑处理</p><h5 id="人脸识别模块"><a href="#人脸识别模块" class="headerlink" title="人脸识别模块"></a>人脸识别模块</h5><p>人脸识别模块开辟独立线程，对于主界面传输过来的图像进行处理，检测，提取人脸特征，并将人脸特征保存在本地。</p><h5 id="人脸检索模块"><a href="#人脸检索模块" class="headerlink" title="人脸检索模块"></a>人脸检索模块</h5><p>人脸检索模块开辟独立线程，并使用线程池管理多个子线程读取本地特征文件并与采集人脸特征进行比对，找到相似度最高的人脸图像并向主界面发送信号。</p><h5 id="人员信息数据模块"><a href="#人员信息数据模块" class="headerlink" title="人员信息数据模块"></a>人员信息数据模块</h5><p>人员信息显示模块，</p><h5 id="签到数据模块"><a href="#签到数据模块" class="headerlink" title="签到数据模块"></a>签到数据模块</h5><p>人员签到信息显示模块</p><h5 id="数据库模块"><a href="#数据库模块" class="headerlink" title="数据库模块"></a>数据库模块</h5><p>该系统维护一个数据库，包括两个表，人员信息表和签到数据表，数据库模块主要是对两个表的增删改查的接口的实现。</p><h5 id="摄像头模块"><a href="#摄像头模块" class="headerlink" title="摄像头模块"></a>摄像头模块</h5><p>摄像头模块将摄像头采集图像进行缩放处理后放置主界面进行显示，并在需要进行图像采集时保存当前帧图像。</p><h1 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h1><p>人脸考勤系统的使用流程大概是这样的：</p><ul><li>1、用户点击录入按钮进行人员的信息录入，录入过程中包括，提取人脸照片特征值，将人脸特征及采集照片保存在本地。同时将地址与人员信息写入数据库。</li><li>2、在人员信息管理模块中可以查找对应人员的信息及采集图像。</li><li>3、点击一键签到，触发人脸检索模块的人脸检索功能，将本地的人脸特征进行遍历比对，找到相似度最高的人脸信息进行显示。</li><li>4、在签到信息管理模块中可以找到人员签到的详细情况。</li></ul><h5 id="信息录入"><a href="#信息录入" class="headerlink" title="信息录入"></a>信息录入</h5><p>从摄像头模块获取一帧的图像，在弹出的窗口中用户输入相关的信息，窗口检查信息是否填写完整，完整则将所填信息存入一个结构体中。触发人脸识别模块的开始，在线程中对采集的人脸图像进行人脸检测，特征提取，人脸截取。最后由主界面显示人员信息并存入数据库。</p><h5 id="一键签到"><a href="#一键签到" class="headerlink" title="一键签到"></a>一键签到</h5><p>从摄像头模块获取一帧图像，在线程中开辟4个子线程由线程池管理，4个子线程读取本地特征数据，与采集的人脸进行比对，找到相似度最高人脸进行信息显示并存入数据库。</p><h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ul><li>1、人脸识别模块可与人脸检索模块进行整合，避免代码的冗余。</li><li>2、将人脸特征值保存在本地是因为特征长度太长，若读入内存会造成内存不足的情况，但是从磁盘中读取速度过慢，要找到一个能够平衡的方法，提高检索速度。</li><li>3、线程池中管理的内存在每次比对时都要对人脸识别引擎进行初始化和销毁引擎造成检索速度过慢。</li><li>4、没有理解线程管理的方法，仅使用简单的线程池来管理，使得线程的使用受到限制，效率过低。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>抽空对多线程管理进行复习，改进线程管理的部分。提高人脸检索的效率。蜗壳真的强。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;把上次花了几天时间写的&lt;a href=&quot;https://github.com/zmwupgreat/Qt_ArcFace_detection&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人脸考勤系统&lt;/a&gt;的设计思路总结一下，顺便总结一下不足之处。第一次独立完成一个小程序的设计还是蛮有成就感的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="人脸识别" scheme="http://www.snailz.top/categories/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（二）----导弹拦截（求最长递减数列）</title>
    <link href="http://www.snailz.top/2018/07/28/arithmetic2/"/>
    <id>http://www.snailz.top/2018/07/28/arithmetic2/</id>
    <published>2018-07-28T07:27:19.000Z</published>
    <updated>2018-08-02T12:45:53.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>某国进行军事演戏，研发一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于等于前一发的高度。某天，雷达捕捉到敌国导弹来袭。由于该系统还在试用阶段，所以只用一套系统，因此有可能不能拦截所有的导弹。请你帮忙选择一套系统，根据测试的导弹数量和每次导弹飞来的高度，计算出最多能拦截导弹的数目。<br><a id="more"></a></p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题的题干说了很多，一开始我并不太明白，后面师兄跟我解释了一下，这就是一道求最长递减数列的题。我只做出了时间复杂度为o(n^2)的一种方法。首先如果使用链表来做的话，从右向左即从最后一位数向第一位数开始遍历。每位数（a）都要与其右边的所有数（b）进行比较，如果a &gt; b则在b链前插a，否则不操作。遍历完成后查询最长链即可找到该数列中的最长递减数列。</p><p>但是由于这题仅需要求出最长递减数列的长度即可，所以可以不使用链表来完成。首先用一个数组a来存储数列，再使用一个数组b来存储递减长度与a相对应。依旧从右向左开始遍历数列。使用当前数m与右边的所有数n进行比较，如果m &gt; n 则比较对应的b[m]和b[n]+1，取大值存在b[m]处。最后找到最长的长度。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;N;n++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">int</span> M;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;M;</span><br><span class="line">    <span class="keyword">int</span> src[M];</span><br><span class="line">    <span class="keyword">int</span> aim[M];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;src[i];</span><br><span class="line">        aim[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Max=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=M<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;M;k++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(src[j]&gt;src[k])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(aim[j]&lt;aim[k]+<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                aim[j]=aim[k]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span>(Max&lt;aim[j])</span><br><span class="line">      &#123;</span><br><span class="line">      Max=aim[j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Max;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一道简单的动态规划问题，还有时间复杂度为o（n）的方法还没有理解。以后理解了再添加。蜗壳真的强！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;某国进行军事演戏，研发一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于等于前一发的高度。某天，雷达捕捉到敌国导弹来袭。由于该系统还在试用阶段，所以只用一套系统，因此有可能不能拦截所有的导弹。请你帮忙选择一套系统，根据测试的导弹数量和每次导弹飞来的高度，计算出最多能拦截导弹的数目。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛墙裂安利（一）</title>
    <link href="http://www.snailz.top/2018/07/28/share1/"/>
    <id>http://www.snailz.top/2018/07/28/share1/</id>
    <published>2018-07-28T06:20:01.000Z</published>
    <updated>2018-08-02T12:47:00.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这是第一篇分享，寒假的时候在家开始学会用电子产品看书了。看书真的很舒服，能让人把心静下来。当时看了余华的《活着》《许三观卖血记》《兄弟》还有《余罪》《人民的名义》《白鹿原》，哇现在列出来感觉看了好多。但是那个时候没有做点小记录，感觉有点可惜。不过这些书很适合再看好多遍。记得许三观卖血记我是在机场看完的，当时飞机延误了五个多小时，大半夜才飞，难受死我了。看书的时候我还喜欢听听歌最近迷林宥嘉的歌。平时还喜欢看看电影。假装是个文艺的人。</p><a id="more"></a><h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><p>前面说的那么多废话，接下来我要安利的几本书却是东野圭吾的哈哈哈。这学期偷懒的时候看的几本书。东野圭吾真的是一个超级优秀的作家啊。让我不禁感叹这大师的脑子怎么长的。他的悬疑小说总是能把疑点留到最后，每每当你觉得这个事情好像你都看穿了。实际上你的想法是作者想要引导你走向的方向。是不是很恐怖，是不是很精彩。</p><h5 id="东野圭吾《恶意》"><a href="#东野圭吾《恶意》" class="headerlink" title="东野圭吾《恶意》"></a>东野圭吾《恶意》</h5><p>我的这个感受在东野圭吾的《恶意》这本书里体现的淋漓尽致。《恶意》整本书都是用这个人说了啥，那个人说了啥的方式来叙述的故事。整本书一开始就以作家野野口的角度，交代了事件发生的前因后果。其中以杀害邻居家小猫的小细节给死者下了个定义。给了读者先入为主的看法。在读者的心中对死者的印象就不是很好。而不经意间让人觉得野野口是一个很有文化修养，考虑周全，配合警方行动的高尚的人。野野口以能够帮助警方的名义把自己写的东西给警察阅读。以至于警察一开始也像读者一样陷入了野野口的陷阱。直到一个警察的不懈努力下发现野野口破绽并推理出案发当晚发生的事情和一个看似合理的野野口犯罪的动机。罹患癌症的野野口听了警察的推理之后仿佛认罪一样愿意把所有事情都写下来。但是就因为这个，警察又走进了野野口的陷阱。他所写的所有的事情都是假的，把自己描述成一个高尚的人把死者描述成一个投机取巧，不折手段的坏人。引起了社会舆论的巨大议论。但是最后还是在警察的不懈努力下，找到了事件的真相。整本书特别精彩，虽然一开始就知道凶手是谁但是故事剧情的发展特别的新颖。可以说是我看过最有意思的悬疑小说之一了。</p><h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>最近真的被林宥嘉的声音迷倒了哈哈哈，但我还是钢铁直男。林宥嘉的歌超级适合在做正事的时候听，可以让人的心平静下来。最近他的这首脆弱一分钟真的太美了。超级喜欢这句词“时钟不要走，让我脆弱一分钟”。我真的深有体会啊。真的有的时候想要让时间停一停让自己休息一下喘口气，做点喜欢做的事。看着身边的人都在努力都在进步就慌得不行，根本没有喘气的机会。</p><h1 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h1><p>电影还是大家最近都在聊的《我不是药神》我感觉中国的影评很多都要升华联想到一个很高很高的高度。跟做阅读理解一样，看得都烦。即使像药神这种值得议论的片，我也觉得没必要一定要联系到什么多高的东西。单单看演员的演技和丰富的剧情就能被折服。特别是王传君，真的该用演技爆炸来形容，没有过多的秀，演出一个很真实的很有求生欲望却力不从心的绝症病人。他每一次哭，每一次笑，每一句台词里面都感觉到真实，有希望也有力不从心的挣扎。就感觉很舒服。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>很随意的安利记录，蜗壳真的强！</p><p><img src="http://pcnzo4nai.bkt.clouddn.com/book.jpg" alt="book"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;这是第一篇分享，寒假的时候在家开始学会用电子产品看书了。看书真的很舒服，能让人把心静下来。当时看了余华的《活着》《许三观卖血记》《兄弟》还有《余罪》《人民的名义》《白鹿原》，哇现在列出来感觉看了好多。但是那个时候没有做点小记录，感觉有点可惜。不过这些书很适合再看好多遍。记得许三观卖血记我是在机场看完的，当时飞机延误了五个多小时，大半夜才飞，难受死我了。看书的时候我还喜欢听听歌最近迷林宥嘉的歌。平时还喜欢看看电影。假装是个文艺的人。&lt;/p&gt;
    
    </summary>
    
      <category term="墙裂安利" scheme="http://www.snailz.top/categories/%E5%A2%99%E8%A3%82%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛移山第二周</title>
    <link href="http://www.snailz.top/2018/07/28/Fight-SecondWeek/"/>
    <id>http://www.snailz.top/2018/07/28/Fight-SecondWeek/</id>
    <published>2018-07-28T03:48:52.000Z</published>
    <updated>2018-08-02T12:46:22.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>不知不觉就复习了两周了，感觉时间过的有点快。这周学校开始放假了，校园里的人也开始变少了，食堂关了几间，图书馆闭馆时间提前了，教室也只开放了一层。放假开始扰乱我的心了，哈哈哈，看着群里的同学都回家嗨皮了感觉有点难受。只能自嘲还没优秀到可以回家。<br><a id="more"></a></p><h1 id="复习进度"><a href="#复习进度" class="headerlink" title="复习进度"></a>复习进度</h1><p>这个星期把高数部分的内容看完了，总的来说第二本书没有第一本的时候看的那么顺畅，就感觉各种磕磕碰碰的。特别是无穷级数那一章一脸懵逼。现在暂时把这些看不懂的部分做了个记录，后面去看看那些老师讲课的视频吧。概率论刚刚开始看了，前面看的还挺顺。希望下周能尽快看完。还有最难受的线性代数等着我呢。这周英语的黄皮书开始做有题的部分了。真的是虐的我想死。四个选项感觉说的都很有道理。这周前两天做了八篇。后几天都在消化这八篇。很打击自信。</p><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>运动还是照常进行，周二跑去了川大和蔡总和钓叟，一路聊骚不觉得累。在川大里逛了一圈觉得这他娘才是大学呀，又好看又大气。不知不觉聊骚跑到了十一点多。原来信誓旦旦跑到川大再跑回学校的目标破灭了（是时间的原因）。最后骑车回学校了。周四和蔡总跑了一圈东郊记忆。这里面酒吧的驻唱水平真不咋地。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下周继续努力吧，蜗壳真的强！<br><img src="http://pcnzo4nai.bkt.clouddn.com/img_0075.jpg" alt="morning"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;不知不觉就复习了两周了，感觉时间过的有点快。这周学校开始放假了，校园里的人也开始变少了，食堂关了几间，图书馆闭馆时间提前了，教室也只开放了一层。放假开始扰乱我的心了，哈哈哈，看着群里的同学都回家嗨皮了感觉有点难受。只能自嘲还没优秀到可以回家。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂事闲谈" scheme="http://www.snailz.top/categories/%E6%9D%82%E4%BA%8B%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>蜗牛算法积累（一）----单向不循环链表删除</title>
    <link href="http://www.snailz.top/2018/07/26/firstarithmetic/"/>
    <id>http://www.snailz.top/2018/07/26/firstarithmetic/</id>
    <published>2018-07-26T15:57:35.000Z</published>
    <updated>2018-08-02T12:46:32.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>有关删除单向不循环链表一个节点的方法。主要是最近身边的同学和师兄在找工作找实习，触动到我了，我想把以前做过的一点题和听到的题做点总结积累。这个单向不循环链表删除的题的题干：已知单向不循环链表的头结点和一个节点，删除该节点。<br><a id="more"></a></p><h1 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> value;</span><br><span class="line"> node* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  所谓的单向不循环链表就是链表的每个节点仅有该节点的值和下一个节点的地址。所以传统的删除该节点的方法是寻找到该节点的前序节点。然后将前序节点的后继地址指向该节点的后继节点。再将该节点删除完成删除动作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node* pre;</span><br><span class="line">pre = head;</span><br><span class="line"><span class="keyword">while</span>( pre-&gt;next != node)</span><br><span class="line">&#123;</span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = node-&gt;next;</span><br><span class="line"><span class="keyword">delete</span>(node);</span><br></pre></td></tr></table></figure><p>这个做法的时间复杂度为o(n)需要从头节点开始遍历直到找到该节点的前序节点。</p><h1 id="o-1-的方法"><a href="#o-1-的方法" class="headerlink" title="o(1)的方法"></a>o(1)的方法</h1><p>时间复杂度为o(1)的方法特别的巧妙，不需要全部从头节点开始遍历寻找该节点的前序节点。首先判断该节点是否为尾节点，若是尾节点则需要从头开始遍历寻找前序节点，并把前序节点修改为尾节点。若不是尾节点则仅需要将该节点的后继节点深复制到该节点的位置再删除后继节点即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">node-&gt;value = node-&gt;next-&gt;value;</span><br><span class="line"><span class="keyword">delete</span>(node-&gt;next);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是在同学那听到的面试题很巧妙，但是感觉好像以前上课时有讲过，也没什么稀奇的。在这总结一下。蜗壳真的强。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;摘要：&quot;&gt;&lt;a href=&quot;#摘要：&quot; class=&quot;headerlink&quot; title=&quot;摘要：&quot;&gt;&lt;/a&gt;摘要：&lt;/h1&gt;&lt;p&gt;有关删除单向不循环链表一个节点的方法。主要是最近身边的同学和师兄在找工作找实习，触动到我了，我想把以前做过的一点题和听到的题做点总结积累。这个单向不循环链表删除的题的题干：已知单向不循环链表的头结点和一个节点，删除该节点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试算法积累" scheme="http://www.snailz.top/categories/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E7%A7%AF%E7%B4%AF/"/>
    
    
  </entry>
  
</feed>
